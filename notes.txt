day 1:
    - rainforest_resin
    - kelp
    - squid_ink
day 2:
    can trade two types of picnic baskets or individual items
    - picnic_basket1, picnic_basket2
    - croissants
    - jams
    - djembes


---- trading

outsanding = open/active
ask = lowest price seller willing to sell
bid = highest price buyer willing to buy

orderbooks often sorted for quick can grab of best ask/bid prices from top

pnl = profit and loss: profit and loss a trader incurs from trades. diff between assets entry and exit price




---- game

goal: earn as many seashells as possible to bring island to prosperity through algorithmic trading
    - use algo to decide fair value price and price_levels to build trades

15 day competition; 5 rounds and each 72 hours

submitting a trading algorithm class
    - will trade against a number of bots on exchange
    - different products available on each day, sample data available for each

Trader Class with single method called run 
    - larger # of iterations in simulation, each iteraction will call run method with input TradingState object
    - run method has TradingState input
        - all trades since last iteration, own and market
        - per product overview of buy/selll orders (quotes)
    
        - based on logic run method will send orders that fully/partially match with existing orders
            - sending buy order with price >= bot quotes
                - if quanity > bot quote diffferst will be left as outsanding buy
        - next TradingState indicates if bots did decide to trade
    
every trade changes the position (quanity) of a product, limits for each
    - per product basis with absolte value limits 

each submission generates unique identification
trading container based on AWS lambda function


[TradingState]:
    - all important market information for algo to make decisions

    own_trades: trades algo itself has done since last TradingState iteration
        - dictionary of [Trade] objects with key being product names
    
    market_trades: trades of other market participants since last iteration
        - dictionary of [Trade] objects with key being product names
    
    position: lost/short posiiton of player in every product
        - dictionary with key being product names and values signed integers
    
    order_depths: all buy/sell orders per product of other market_participants that algo is able to trade with
        - dict with keys products and values [OrderDepth] class 

[Trade]:
    - symbol, buy, price, quantity, buyer, seller, timestamp

[OrderDepth]:
    - buy_orders, sell_orders
    - all outsanding buy/sell
    - keys are price_levels and quanity for that price, negative for sell_orders 
    - negative quantiies for sell_orders

[Order]:
    - value for return result dictionary of run method
        - keys are product names, vaulues are of type Order
    
    - symbol, price (max for buy, min for sell), quantity

traderData: value keeps state details beetween run iterations


---- python

typing module for support of type hints and type checking
    variable_name: variable_type

